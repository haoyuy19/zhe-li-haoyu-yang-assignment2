{"version":3,"sources":["Main.jsx","Cell.jsx","HeatedCell.jsx","Grid.jsx","img/example.gif","Intro.jsx","MainPage.jsx","index.js"],"names":["width","height","Cell","updateCell","props","row","col","cellStyle","display","border","backgroundColor","this","status","style","className","onClick","React","Component","HeatedCell","heat","aliveness","background","Grid","cols","rows","lineHeight","margin","boxShadow","marginTop","arr","i","j","grid","isheat","push","Intro","pStyle","textAlign","lStyle","src","example","href","userSpeed","Main","copy","JSON","parse","stringify","state","map","livingcount","livingcells","setState","increment","dispatch","type","reset","console","log","init","clear","cells","Math","random","pause","clearInterval","intervalId","paused","play","setInterval","next","speed","hasChange","neighborlive","turnon","count","turnoff","outofbound","heatmapon","myChangeHandlerspeed","event","target","value","enterSpeed","onChange","dangerouslySetInnerHTML","__html","m","n","Array","fill","buttonStyle","connect","newm","newn","generation","MainPage","myChangeHandlerform","myChangeHandlerforn","onsubmitm","onsubmitn","justifyContent","alignContent","exact","path","component","to","initialState","store","createStore","action","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdef68f6.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from './Grid';\nimport Intro from './Intro';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nvar width;\nvar height;\nvar userSpeed = 300;\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        // eslint-disable-next-line react/prop-types\n        if (this.props.m != null) {\n            for (var i = 0; i <= 100; i++) {\n                // eslint-disable-next-line react/prop-types\n                if (i == this.props.m) {\n                    width = i;\n                }\n            }\n        } else {\n            width = 50;\n        }\n        // eslint-disable-next-line react/prop-types\n        if (this.props.n != null) {\n            for (var j = 0; j <= 100; j++) {\n                // eslint-disable-next-line react/prop-types\n                if (j == this.props.n) {\n                    height = j;\n                }\n            }\n        } else {\n            height = 30;\n        }\n\n        console.log(width + ' ' + height);\n        this.state = {\n            speed: 300,\n            paused: true,\n            livingcells: 0,\n            grid: Array(height)\n                .fill()\n                // eslint-disable-next-line react/prop-types\n                .map(() => Array(width).fill(false)),\n            aliveness: Array(width)\n                .fill()\n                // eslint-disable-next-line react/prop-types\n                .map(() => Array(width).fill(0)),\n            outofbound: false,\n            // // eslint-disable-next-line react/prop-types\n            // total: this.props.count,\n        };\n        //console.log(width);\n    }\n\n    // outofbound = (m, n) => {\n    //     this.setState({\n    //         grid: [],\n    //     });\n    // };\n\n    updateCell = (i, j) => {\n        let copy = JSON.parse(JSON.stringify(this.state.grid));\n        let map = JSON.parse(JSON.stringify(this.state.aliveness));\n        let livingcount = this.state.livingcells;\n        copy[i][j] = !copy[i][j];\n        if (copy[i][j]) {\n            livingcount += 1;\n        } else {\n            livingcount -= 1;\n        }\n        this.setState({\n            grid: copy,\n            aliveness: map,\n            livingcells: livingcount,\n        });\n    };\n\n    increment = () => {\n        // eslint-disable-next-line react/prop-types\n        this.props.dispatch({ type: 'INCREMENT' });\n        // console.log('Another ONNNNNNNNNNNNE');\n    };\n\n    reset = () => {\n        // eslint-disable-next-line react/prop-types\n        this.props.dispatch({ type: 'RESET' });\n        console.log('0000000000000000000');\n    };\n\n    init = () => {\n        this.clear();\n        let copy = JSON.parse(JSON.stringify(this.state.grid));\n        let map = JSON.parse(JSON.stringify(this.state.aliveness));\n        let cells = 0;\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                copy[i][j] = false;\n                map[i][j] = 0;\n                if (Math.random() <= 0.05) {\n                    copy[i][j] = true;\n                    map[i][j] = 1;\n                    // eslint-disable-next-line react/prop-types\n                    cells++;\n                    console.log('++++++++++++++++++++++++++++++');\n                }\n            }\n        }\n        this.increment();\n        this.setState({\n            grid: copy,\n            aliveness: map,\n            livingcells: cells,\n        });\n    };\n\n    clear = () => {\n        let copy = JSON.parse(JSON.stringify(this.state.grid));\n        let map = JSON.parse(JSON.stringify(this.state.aliveness));\n        this.reset();\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                copy[i][j] = false;\n                map[i][j] = 0;\n            }\n        }\n\n        this.setState({\n            grid: copy,\n            aliveness: map,\n            livingcells: 0,\n        });\n    };\n\n    pause = () => {\n        clearInterval(this.intervalId);\n        this.setState({\n            paused: true,\n        });\n    };\n\n    play = () => {\n        clearInterval(this.intervalId);\n        this.setState({\n            paused: false,\n        });\n        if (userSpeed != null) {\n            this.intervalId = setInterval(this.next, userSpeed);\n        } else {\n            this.intervalId = setInterval(this.next, this.state.speed);\n        }\n    };\n\n    next = () => {\n        let hasChange = false;\n        let neighborlive = 0;\n        // eslint-disable-next-line react/prop-types\n        let livingcount = this.state.livingcells;\n        let copy = JSON.parse(JSON.stringify(this.state.grid));\n        let map = JSON.parse(JSON.stringify(this.state.aliveness));\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (i > 0) {\n                    if (copy[i - 1][j] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (j > 0) {\n                    if (copy[i][j - 1] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (j > 0 && i > 0) {\n                    if (copy[i - 1][j - 1] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (i < height - 1) {\n                    if (copy[i + 1][j] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (j < width - 1) {\n                    if (copy[i][j + 1] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (i < height - 1 && j < width - 1) {\n                    if (copy[i + 1][j + 1] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (i > 0 && j < width - 1) {\n                    if (copy[i - 1][j + 1] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (i < height - 1 && j > 0) {\n                    if (copy[i + 1][j - 1] == true) {\n                        neighborlive++;\n                    }\n                }\n                if (copy[i][j] == true) {\n                    if (neighborlive == 2 || neighborlive == 3) {\n                        copy[i][j] = true;\n                        map[i][j] = 1;\n                    } else {\n                        hasChange = true;\n                        copy[i][j] = false;\n                        map[i][j] = 0.9;\n                        livingcount = livingcount - 1;\n                        console.log('KILL ONE');\n                    }\n                    //console.log(neighborlive);\n                    neighborlive = 0;\n                    continue;\n                }\n                if (copy[i][j] == false) {\n                    map[i][j] = map[i][j] - 0.1 > 0 ? map[i][j] - 0.1 : 0;\n                    if (neighborlive == 3) {\n                        hasChange = true;\n                        copy[i][j] = true;\n                        map[i][j] = 1;\n                        livingcount = livingcount + 1;\n                        console.log('bring back one');\n                    }\n                    //console.log(neighborlive);\n                    neighborlive = 0;\n                    continue;\n                }\n            }\n        }\n        console.log(livingcount);\n        if (hasChange) {\n            this.increment();\n        }\n        this.setState({\n            grid: copy,\n            aliveness: map,\n            livingcells: livingcount,\n        });\n        if (!hasChange) {\n            this.pause();\n        }\n    };\n\n    turnon = () => {\n        clearInterval(this.intervalId);\n        this.setState({\n            paused: true,\n        });\n        // eslint-disable-next-line react/prop-types\n        this.props.dispatch({ type: 'HEAT' });\n        console.log('DISPATH MADE!!!!!!!!!');\n        // eslint-disable-next-line react/prop-types\n        console.log(this.props.count);\n    };\n\n    turnoff = () => {\n        clearInterval(this.intervalId);\n        this.setState({\n            paused: true,\n        });\n        // eslint-disable-next-line react/prop-types\n        this.props.dispatch({ type: 'GAME' });\n        console.log('DISPATH MADE???????');\n        // eslint-disable-next-line react/prop-types\n        console.log(this.props.count);\n    };\n\n    outofbound = () => {\n        if (width >= 10 && width <= 100 && height >= 10 && height <= 100) {\n            //console.log(height + ' ' + width);\n            return (\n                <Grid\n                    grid={this.state.grid}\n                    aliveness={this.state.aliveness}\n                    rows={height}\n                    cols={width}\n                    // eslint-disable-next-line react/prop-types\n                    isheat={this.props.heatmapon}\n                    updateCell={this.updateCell}\n                />\n            );\n        } else {\n            return (\n                <div>\n                    {' '}\n                    Your input is out of bound (valid input should between 10 -\n                    100)\n                </div>\n            );\n        }\n    };\n\n    myChangeHandlerspeed = event => {\n        userSpeed = event.target.value;\n        //console.log(event.target.value + ' ' + this.state.speed);\n        this.setState({\n            speed: userSpeed,\n        });\n    };\n\n    componentDidMount() {\n        this.enterSpeed;\n    }\n\n    enterSpeed = () => {\n        if (this.state.paused) {\n            return (\n                <div>\n                    <p>Speed of your choice (50 - 2000)</p>\n                    <input type=\"text\" onChange={this.myChangeHandlerspeed} />\n                </div>\n            );\n        } else {\n            return (\n                // document.getElementbyId(\"anyid\").innerHTML = score;\n                <div>\n                    <p>Current speed</p>\n                    <div dangerouslySetInnerHTML={{ __html: userSpeed }} />\n                </div>\n            );\n        }\n    };\n\n    render() {\n        //console.log(this.state);\n        var buttonStyle = {\n            margin: '20px',\n        };\n        // eslint-disable-next-line react/prop-types\n        console.log(this.props.count);\n\n        return (\n            <div>\n                <h2>\n                    Generations:{' '}\n                    {\n                        // eslint-disable-next-line react/prop-types\n                        this.props.count\n                    }\n                </h2>\n                <p>\n                    Living Cells:\n                    {' ' + this.state.livingcells}\n                </p>\n                <this.outofbound />\n                <button style={buttonStyle} type=\"button\" onClick={this.init}>\n                    initial\n                </button>\n                <button style={buttonStyle} type=\"button\" onClick={this.next}>\n                    next\n                </button>\n                <button style={buttonStyle} type=\"button\" onClick={this.play}>\n                    start\n                </button>\n                <button style={buttonStyle} type=\"button\" onClick={this.pause}>\n                    pause\n                </button>\n                <button style={buttonStyle} type=\"button\" onClick={this.clear}>\n                    clear\n                </button>\n                <button style={buttonStyle} type=\"button\" onClick={this.turnon}>\n                    Show Heat Map\n                </button>\n                <button\n                    style={buttonStyle}\n                    type=\"button\"\n                    onClick={this.turnoff}>\n                    Show Game Board\n                </button>\n                <this.enterSpeed></this.enterSpeed>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        heatmapon: state.heatmapon,\n        count: state.count,\n        generation: state.generation,\n    };\n}\n\nexport default connect(mapStateToProps)(Main);\n","import React from 'react';\nclass Cell extends React.Component {\n    updateCell = () => {\n        // eslint-disable-next-line react/prop-types\n        this.props.updateCell(this.props.row, this.props.col);\n    };\n    render() {\n        var color;\n        //console.log(this.props.cell);\n        // eslint-disable-next-line react/prop-types\n        if (this.props.status) {\n            color = 'white';\n        } else {\n            color = 'black';\n        }\n        var cellStyle = {\n            display: 'inline-block',\n            border: '2px solid gray',\n            width: '15px',\n            height: '15px',\n            backgroundColor: color,\n        };\n        return (\n            <div\n                style={cellStyle}\n                className=\"cell\"\n                onClick={this.updateCell}></div>\n        );\n    }\n}\nexport default Cell;\n","import React from 'react';\n\nclass HeatedCell extends React.Component {\n    render() {\n        var heat;\n        // eslint-disable-next-line react/prop-types\n        heat = this.props.aliveness;\n        var cellStyle = {\n            display: 'inline-block',\n            border: '2px solid gray',\n            width: '15px',\n            height: '15px',\n            background: `rgba(255, 0, 0, ${heat})`,\n        };\n\n        return (\n            <div\n                style={cellStyle}\n                className=\"cell\"\n                onClick={this.updateCell}></div>\n        );\n    }\n}\nexport default HeatedCell;\n","import React from 'react';\nimport Cell from './Cell';\nimport HeatedCell from './HeatedCell';\n\nclass Grid extends React.Component {\n    render() {\n        // eslint-disable-next-line react/prop-types\n        const width = this.props.cols * 19;\n        // eslint-disable-next-line react/prop-types\n        const height = this.props.rows * 19;\n        var cellStyle = {\n            height: height,\n            width: width,\n            lineHeight: '0',\n            margin: 'auto',\n            boxShadow: '0px 0px 20px white',\n            marginTop: '20px',\n        };\n        var arr = [];\n\n        var status;\n        // eslint-disable-next-line react/prop-types\n        //console.log(this.props.cols);\n        // eslint-disable-next-line react/prop-types\n        for (var i = 0; i < this.props.rows; i++) {\n            // eslint-disable-next-line react/prop-types\n            for (var j = 0; j < this.props.cols; j++) {\n                // eslint-disable-next-line react/prop-types\n                status = this.props.grid[i][j];\n                // eslint-disable-next-line react/prop-types\n                let aliveness = this.props.aliveness[i][j];\n                // eslint-disable-next-line react/prop-types\n                if (this.props.isheat) {\n                    arr.push(\n                        <HeatedCell\n                            status={status}\n                            aliveness={aliveness}\n                            row={i}\n                            col={j}\n                        />\n                    );\n                } else {\n                    arr.push(\n                        <Cell\n                            status={status}\n                            aliveness={aliveness}\n                            row={i}\n                            col={j}\n                            // eslint-disable-next-line react/prop-types\n                            updateCell={this.props.updateCell}\n                        />\n                    );\n                }\n            }\n            // eslint-disable-next-line react/prop-types\n            // console.log(this.props.grid[i]);\n            //console.log(i);\n        }\n        //console.log(arr);\n        return <div style={cellStyle}>{arr}</div>;\n    }\n}\n\nexport default Grid;\n","export default __webpack_public_path__ + \"static/media/example.5185e873.gif\";","import React from 'react';\nimport example from './img/example.gif';\n\nclass Intro extends React.Component {\n    constructor() {\n        super();\n    }\n    render() {\n        let pStyle = {\n            textAlign: 'left',\n        };\n        let lStyle = {\n            textAlign: 'left',\n        };\n        return (\n            <div>\n                <img src={example}></img>\n                <p style={pStyle}>\n                    Conway’s Game of Life (henceforth, Life) is based on a grid\n                    system. Every individual location on the grid can be\n                    understood as a cell. The game, or simulation, occurs over\n                    iterations, or generations. After a generation, a cell may\n                    change from living or dead based on how many living or dead\n                    neighbors it had in a previous iteration. A neighbor is any\n                    immediately adjacent spot on the grid (horizontal, vertical\n                    or diagonal). We can understand this more clearly with an\n                    example and a clear demonstration of the rules.\n                    <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">\n                        {'  '}\n                        Read more.\n                    </a>\n                </p>\n                <p style={pStyle}>Rules For Life:</p>\n                <ol style={lStyle}>\n                    <li>\n                        A living cell with less than two living neighbours dies.\n                    </li>\n                    <li>\n                        A living cell with two or three live neighbours lives.\n                    </li>\n                    <li>\n                        A living cell with more than three live neighbours dies.\n                    </li>\n                    <li>\n                        A dead cell with exactly three live neighbours becomes a\n                        live cell, as if by reproduction.\n                    </li>\n                </ol>\n                <p style={pStyle}>User Guide:</p>\n                <ol style={lStyle}>\n                    <li>\n                        User can set the width and height for the game board.\n                        The smallest possible grid should be 10 X 10 and the\n                        biggest possible grid should be 100 X 100.\n                    </li>\n                    <li>Click initial to generate a random set of cells.</li>\n                    <li>Click next to see the next generation.</li>\n                    <li>Click start to start the simulation.</li>\n                    <li>\n                        Click pause to pause the simulation. User can click any\n                        cell To reverse its state. For instance, if a cell is\n                        dead and a user clicks on it, it should be marked as a\n                        live.\n                    </li>\n                    <li>Click clear to reset the grid.</li>\n                    <li>\n                        Click Show Heat Map to see how recently a grid was\n                        alive. When a cell is currently alive, it should be red.\n                        When a cell has been dead for 10 or more iterations, it\n                        should be white. The lighter the shade, the more acient\n                        the cell.\n                    </li>\n                    <li>\n                        Click Show Game Board to go back to the game\n                        environment.\n                    </li>\n                    <li>\n                        User can input the frequency of updates to this\n                        simulation at the speed of choice. The frequency of a\n                        generation can be between 50 to 2000ms. This value can\n                        only be set when the simulation is NOT running.\n                    </li>\n                </ol>\n                <a href=\"/\">Back to game</a>\n            </div>\n        );\n    }\n}\n\nexport default Intro;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Router, Link, Switch } from 'react-router-dom';\nimport Main from './Main';\nimport Intro from './Intro';\nimport { connect } from 'react-redux';\n\nvar newm;\nvar newn;\nclass MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            m: 0,\n        };\n        this.state = {\n            n: 0,\n        };\n    }\n\n    myChangeHandlerform = event => {\n        newm = event.target.value;\n        this.setState({ m: newm });\n        // console.log(this.state.m);\n    };\n    myChangeHandlerforn = event => {\n        newn = event.target.value;\n        this.setState({ n: event.target.value });\n    };\n\n    onsubmitm = m => {\n        this.setState.m({ m });\n    };\n    onsubmitn = n => {\n        this.setState.n({ n });\n    };\n\n    render() {\n        const styleform = {\n            //   width: \"50%\",\n            //   display:\"block\",\n            margin: 'auto',\n            justifyContent: 'center',\n            alignContent: 'center',\n            textAlign: 'center',\n        };\n\n        return (\n            // eslint-disable-next-line react/jsx-no-comment-textnodes\n            <form style={styleform}>\n                <h1>Conways History of Life</h1>\n                {/* <button> */}\n\n                <div>\n                    <BrowserRouter>\n                        <Switch>\n                            <Route exact path=\"/\" component={MainPage}>\n                                <p>Enter width:</p>\n                                <input\n                                    type=\"text\"\n                                    onChange={this.myChangeHandlerform}\n                                />\n                                <p>Enter height:</p>\n                                <input\n                                    type=\"text\"\n                                    onChange={this.myChangeHandlerforn}\n                                />\n                                <div>\n                                    <button style={{ margin: '5px' }}>\n                                        <Link to=\"/grid\"> Submit </Link>\n                                    </button>\n                                </div>\n                                <div>\n                                    <p>\n                                        <Link to=\"/intro\">\n                                            {' '}\n                                            Game Introduction{' '}\n                                        </Link>\n                                    </p>\n                                </div>\n                            </Route>\n                            <Route path=\"/grid\" component={Main}>\n                                {/* <Cell m = {this.state.m}/> */}\n                                <Main n={newn} m={newm} />\n                            </Route>\n                            <Route path=\"/intro\" component={Intro}>\n                                <Intro />\n                            </Route>\n                        </Switch>\n                    </BrowserRouter>\n                    {/* <Cell m = {this.state.m}/> */}\n                </div>\n                <div></div>\n            </form>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        heatmapon: state.heatmapon,\n    };\n}\n\nexport default connect(mapStateToProps)(MainPage);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainPage from './MainPage';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst initialState = {\n    heatmapon: false,\n    count: 0,\n};\nfunction reducer(state = initialState, action) {\n    switch (action.type) {\n        case 'HEAT':\n            return {\n                heatmapon: true,\n                count: state.count,\n            };\n        case 'GAME':\n            return {\n                heatmapon: false,\n                count: state.count,\n            };\n        case 'INCREMENT':\n            return {\n                count: state.count + 1,\n            };\n        case 'RESET':\n            return {\n                count: 0,\n            };\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(reducer);\nconsole.log(store.getState());\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <MainPage />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}